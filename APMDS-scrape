{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Searching...\n",
      "Importing summaries...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1214cf7ba2b54f7da865e10e2b2232ba",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Importing registration timelines', max=68.0, style=Progreâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from requests_html import HTML\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "base_url = 'https://www.tga.gov.au'\n",
    "search_url = base_url + '/australian-prescription-medicine-decision-summaries?search_api_views_fulltext=&sort_by=field_original_publication_date&sort_order=DESC&items_per_page=All'\n",
    "\n",
    "\n",
    "def get_fields(tag):\n",
    "    \"\"\"\n",
    "    Takes a APMDS summary search result and returns the available fields\n",
    "    \"\"\"\n",
    "    \n",
    "    def f(x):\n",
    "        field = x.attrs['class'][1].rpartition('field-')[2]\n",
    "        text = x.text.split('\\n')[-1].split(': ')[-1]\n",
    "        return {field: text}\n",
    "    \n",
    "    res = {}\n",
    "    for field in tag.find('div.views-field, p.views-field'):\n",
    "        res.update(f(field))\n",
    "    res['url'] = base_url + tag.find('a')[0].attrs['href']\n",
    "    \n",
    "    return res\n",
    "\n",
    "\n",
    "def get_registration_timeline(table, url):\n",
    "    \"\"\"\n",
    "    Takes the registration timeline table from a APMDS and returns a list of tuples\n",
    "    of description/dates\n",
    "    \"\"\"\n",
    "    \n",
    "    res = {}\n",
    "    res['url'] = url\n",
    "    for i, row in enumerate(table.find('tr')):\n",
    "        if i == 0:\n",
    "            continue\n",
    "        description, date = row.find('td')\n",
    "        res['step_' + str(i)] = description.text\n",
    "        res['step_' + str(i) + '_date'] = date.text\n",
    "    \n",
    "    return res\n",
    "\n",
    "\n",
    "# run search\n",
    "print('Searching...')\n",
    "r = requests.get(search_url)\n",
    "html = HTML(html=r.content)\n",
    "\n",
    "# collect APMDS information - forms base table\n",
    "print('Importing summaries...')\n",
    "APMDS_html = html.find('div.views-row')\n",
    "APMDS = pd.DataFrame([get_fields(tag) for tag in APMDS_html])\n",
    "\n",
    "# turn to datetime\n",
    "APMDS['artg-start-date'] = pd.to_datetime(APMDS['artg-start-date'])\n",
    "APMDS['original-publication-date'] = pd.to_datetime(APMDS['original-publication-date'])\n",
    "\n",
    "# add APMDS_id\n",
    "APMDS = APMDS.reset_index().rename(columns={'index': 'APMDS_id'})\n",
    "\n",
    "# gather registration timelines\n",
    "registration_timelines = {}\n",
    "for idx, url in tqdm(enumerate(APMDS.url), total=len(APMDS.url), desc='Importing registration timelines'):\n",
    "    r = requests.get(url)\n",
    "    html = HTML(html=r.content)\n",
    "    table = html.find('div.field-name-field-decision-steps')[0].find('table')[0]\n",
    "    registration_timelines[idx] = get_registration_timeline(table, url)\n",
    "\n",
    "# convert to dataframe and add APMDS_id\n",
    "timelines = pd.DataFrame(registration_timelines).transpose().reset_index().rename(columns={'index': 'APMDS_id'})\n",
    "\n",
    "# save\n",
    "APMDS.to_csv('APMDS.csv', index=False)\n",
    "timelines.to_csv('timelines.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
