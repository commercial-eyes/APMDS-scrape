{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Searching...\n",
      "Importing summaries...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3db33bd16a284fbc997c88e623b19704",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, description='Importing summary data', max=68.0, style=ProgressStyle(deâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import requests\n",
    "from requests_html import HTML\n",
    "\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "from collections import defaultdict\n",
    "from pathlib import Path\n",
    "\n",
    "base_url = 'https://www.tga.gov.au'\n",
    "search_url = base_url + '/australian-prescription-medicine-decision-summaries?search_api_views_fulltext=&sort_by=field_original_publication_date&sort_order=DESC&items_per_page=All'\n",
    "base_path = Path(r'C:\\Users\\ian.teichert\\OneDrive - Commercial Eyes Pty Ltd\\Work\\Databases\\APMDS')\n",
    "\n",
    "def get_html(url, params=None):\n",
    "    \"\"\"\n",
    "    Returns HTML object of r.content\n",
    "    \"\"\"\n",
    "    \n",
    "    r = requests.get(url, params=params)\n",
    "    return HTML(html=r.content)\n",
    "\n",
    "\n",
    "def get_fields(tag):\n",
    "    \"\"\"\n",
    "    Takes a APMDS summary search result and returns the available fields\n",
    "    \"\"\"\n",
    "    \n",
    "    def f(x):\n",
    "        field = x.attrs['class'][1].rpartition('field-')[2]\n",
    "        text = x.text.split('\\n')[-1].split(': ')[-1]\n",
    "        return {field: text}\n",
    "    \n",
    "    res = {}\n",
    "    for field in tag.find('div.views-field, p.views-field'):\n",
    "        res.update(f(field))\n",
    "    res['url'] = base_url + tag.find('a')[0].attrs['href']\n",
    "    \n",
    "    return res\n",
    "\n",
    "\n",
    "def get_decision_summary(tag, url):\n",
    "    \"\"\"\n",
    "    Returns the parsed decision summary table from the AMPDS\n",
    "    \"\"\"\n",
    "    \n",
    "    res = {}\n",
    "    res['url'] = url\n",
    "    for row in tag.find('table')[0].find('tr'):\n",
    "        field_row = row.find('.field')[0]\n",
    "        _, field, dtype, *x = (t.rpartition('field-')[2].replace('type-', '') for t in field_row.attrs['class'])\n",
    "        if 'datetime' in dtype:\n",
    "            text = pd.to_datetime(field_row.text)\n",
    "        else:\n",
    "            text = field_row.text\n",
    "        res[field] = text\n",
    "    return res\n",
    "\n",
    "        \n",
    "def get_registration_timeline(tag, url):\n",
    "    \"\"\"\n",
    "    Takes the registration timeline table from a APMDS and returns a list of tuples\n",
    "    of description/dates\n",
    "    \"\"\"\n",
    "    \n",
    "    table = tag.find('table')[0]\n",
    "    \n",
    "    res = {}\n",
    "    res['url'] = url\n",
    "    for i, row in enumerate(table.find('tr')):\n",
    "        if i == 0:\n",
    "            continue\n",
    "        description, date = row.find('td')\n",
    "        res['step_' + str(i)] = description.text\n",
    "        res['step_' + str(i) + '_date'] = date.text\n",
    "    \n",
    "    return res\n",
    "\n",
    "\n",
    "# run search\n",
    "print('Searching...')\n",
    "html = get_html(search_url)\n",
    "\n",
    "# collect APMDS information - forms base table\n",
    "print('Importing summaries...')\n",
    "APMDS_html = html.find('div.views-row')\n",
    "APMDS = pd.DataFrame([get_fields(tag) for tag in APMDS_html])\n",
    "\n",
    "# turn to datetime\n",
    "APMDS['artg-start-date'] = pd.to_datetime(APMDS['artg-start-date'])\n",
    "APMDS['original-publication-date'] = pd.to_datetime(APMDS['original-publication-date'])\n",
    "\n",
    "# add APMDS_id\n",
    "APMDS = APMDS.reset_index().rename(columns={'index': 'APMDS_id'})\n",
    "\n",
    "# dictionary key names\n",
    "data_map = {\n",
    "    0: 'summary',\n",
    "    1: 'what_was_approved',\n",
    "    2: 'medicine_detail',\n",
    "    3: 'decision_basis',\n",
    "    4: 'timeline',\n",
    "    5: 'post_market_commitments'\n",
    "}\n",
    "\n",
    "# gather registration timelines\n",
    "res = defaultdict(dict)\n",
    "for idx, url in tqdm(enumerate(APMDS.url), total=len(APMDS.url), desc='Importing summary data'):\n",
    "    summary_data = defaultdict(dict)\n",
    "    summary_data['url'] = url\n",
    "    html = get_html(url)\n",
    "    for j, tag in enumerate(html.find('div.field-group-format-wrapper')):\n",
    "        if j == 0:\n",
    "            summary_data[data_map[j]] = get_decision_summary(tag, url)\n",
    "        elif j == 4:\n",
    "            summary_data[data_map[j]] = get_registration_timeline(tag, url)\n",
    "        else:\n",
    "            summary_data[data_map[j]] = tag.text\n",
    "\n",
    "    res[idx] = summary_data\n",
    "\n",
    "# create dataframes\n",
    "df = pd.DataFrame(res).transpose().sort_index()\n",
    "df = df.reset_index().rename(columns={'index':'APMDS_id'})\n",
    "\n",
    "summary_table = df.summary.to_dict()\n",
    "summary_table = pd.DataFrame(summary_table).transpose().reset_index().rename(columns={'index':'APMDS_id'})\n",
    "\n",
    "timeline = df.timeline.to_dict()\n",
    "timeline = pd.DataFrame(timeline).transpose().reset_index().rename(columns={'index':'APMDS_id'})\n",
    "\n",
    "df = df.drop(['summary', 'timeline'], axis=1)\n",
    "\n",
    "APMDS = APMDS.merge(df.drop('url', axis=1), on='APMDS_id')\n",
    "\n",
    "# save\n",
    "APMDS.to_csv(base_path / 'APMDS.csv', index=False)\n",
    "summary_table.to_csv(base_path / 'summary.csv', index=False)\n",
    "timeline.to_csv(base_path / 'timeline.csv', index=False)\n",
    "\n",
    "print('Done.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
